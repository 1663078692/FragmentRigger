import java.util.regex.Matcher
import java.util.regex.Pattern

ext {
    app = [
            appVerCode       : 1,
            appVerName       : "0.0.1" + "-${releaseTime()}",
            applicationId    : "com.yj.app",
            versionNameSuffix: getCurrentVersionSuffix(),
            minSdkVersion    : 14
    ]

    rigger = [
            publishCode   : 1,
            publishVersion: "1.0.0",
            userOrg       : 'jkb',
            groupId       : 'com.justkiddingbaby',
            artifactId    : 'fragment-rigger',
            desc          : 'A powerfual library to manage Fragments.',
            website       : 'https://github.com/JustKiddingBaby/FragmentRigger'
    ]

    android = [
            minSdkVersion             : 12,
            targetSdkVersion          : 23,
            compileSdkVersion         : 23,
            buildToolsVersion         : "25.0.0",
            sourceCompatibilityVersion: JavaVersion.VERSION_1_8,
            targetCompatibilityVersion: JavaVersion.VERSION_1_8
    ]

    dependencies = [
            appcompatV7: 'com.android.support:appcompat-v7:23.0.1',
            design     : 'com.android.support:design:24.0.0',
            aspectJ    : 'org.aspectj:aspectjrt:1.8.9'
    ]

    store = [
            storeKey     : '../sign/JustKiddingBaby.jks',
            storePassword: 'mimajiushiwo',
            keyAlias     : 'JustKiddingBaby',
            keyPassword  : 'mimajiushiwo'
    ]
}

def static releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+8"))
}

def getCurrentVersionSuffix() {
    def currentFlavor = getCurrentFlavor()
    if (currentFlavor == "prod") {
        return "-prod"
    } else if (currentFlavor == "uat") {
        return "-uat"
    } else if (currentFlavor == "dev") {
        return "-dev"
    }
}

def getCurrentFlavor() {
    String taskRequestName = getGradle().getStartParameter().getTaskRequests().toString()
    Pattern pattern;
    if (taskRequestName.contains("assemble")) {
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    } else {
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
    }
    Matcher matcher = pattern.matcher(taskRequestName)
    if (matcher.find()) {
        return matcher.group(1).toLowerCase()
    } else {
        return "";
    }
}